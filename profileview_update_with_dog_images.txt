Here are the changes to make your ProfileView use real dog images:

1. ADD IMPORT (after line 275):
import { getMultipleDogImages, generateFakeDogProfile, generateFakeDogProfiles } from '../services/dogImages.js'

2. ADD GENERATE FAKE PROFILES BUTTON (in the profiles-header section, around line 25):
<div class="profiles-header">
  <div>
    <h2>Your Dog Profiles</h2>
    <p>Manage and preview your dog profiles</p>
  </div>
  <div class="header-actions">
    <button class="generate-btn" @click="generateFakeProfiles" :disabled="generating">
      {{ generating ? 'Generating...' : 'Generate Fake Profiles' }}
    </button>
  </div>
</div>

3. ADD GENERATING STATE (after line 285):
const generating = ref(false)

4. REPLACE fetchDogs function (around line 400):
const fetchDogs = async () => {
  if (!currentUser.value) return
  try {
    // Sample data with real dog images
    const sampleDogs = [
      { id: '1', name: 'Tango', breed: 'Golden Retriever', sex: 'male', age: '3 years', birthday: '2021-01-14',
        weight: '62 pounds', weightValue: 62, temperament: 'Friendly, energetic, and great with kids',
        location: 'San Francisco, CA', trainingLevel: 'intermediate', certifications: ['akc'],
        trainingNotes: 'Completed basic obedience training at 6 months. Excellent recall and house trained.',
        lookingFor: 'breeding', preferredBreeds: 'Golden Retriever, Labrador', minAgePref: 2, maxAgePref: 5, travelDistance: '50' },
      { id: '2', name: 'Luna', breed: 'German Shepherd', sex: 'female', age: '2 years', birthday: '2022-03-15',
        weight: '55 pounds', weightValue: 55, temperament: 'Intelligent, protective, and loyal',
        location: 'San Francisco, CA', trainingLevel: 'advanced', certifications: ['akc', 'therapy'],
        trainingNotes: 'Advanced obedience training completed. Therapy dog certified.',
        lookingFor: 'companion', preferredBreeds: 'German Shepherd, Belgian Malinois', minAgePref: 1, maxAgePref: 4, travelDistance: '25' }
    ]
    
    // Get real dog images for each profile
    for (const dog of sampleDogs) {
      const images = await getMultipleDogImages(3)
      dog.photos = images.length > 0 ? images : ['https://images.unsplash.com/photo-1552053831-71594a27632d?w=400&h=500&fit=crop']
    }
    
    userDogs.value = sampleDogs
  } catch (e) {
    console.error('fetchDogs error', e)
  }
}

5. ADD generateFakeProfiles function (after fetchDogs):
const generateFakeProfiles = async () => {
  try {
    generating.value = true
    const fakeProfiles = await generateFakeDogProfiles(5)
    userDogs.value = [...userDogs.value, ...fakeProfiles]
    console.log('Generated', fakeProfiles.length, 'fake profiles')
  } catch (error) {
    console.error('Error generating fake profiles:', error)
    alert('Failed to generate fake profiles. Check console for details.')
  } finally {
    generating.value = false
  }
}

6. ADD STYLES for the generate button (in the <style> section):
.generate-btn {
  background: #28a745;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
}

.generate-btn:hover:enabled {
  background: #218838;
  transform: translateY(-1px);
}

.generate-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none;
}

.profiles-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  margin-bottom: 1rem;
}

.header-actions {
  display: flex;
  gap: 1rem;
  align-items: center;
}
