rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isOwner(ownerId) { return isSignedIn() && request.auth.uid == ownerId; }

    // --- users: owner writes, choose if reads are public or signed-in ---
    match /users/{uid} {
      // If you want public browsing of profiles, use `if true;`
      // If you only want signed-in users to browse, keep isSignedIn()
      allow read: if true;  // <- change to isSignedIn() if you prefer
      allow create: if isSignedIn()
                    && request.resource.data.uid == request.auth.uid;
      allow update, delete: if isOwner(resource.data.uid);
    }

    // --- dogs: enforce owner + schema together ---
    match /dogs/{dogId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.ownerId);
      allow create, update: if
        request.resource.data.keys().hasAll(["ownerId","name","sex"]) &&
        (request.resource.data.name is string) &&
        (request.resource.data.sex in ["M","F"]);
    }


    // --- likes: combine all constraints in ONE line ---
    match /likes/{likeId} {
      allow read: if isSignedIn();

      // liker must be signed in + owner; forbid self-like
      allow create: if isSignedIn()
        && request.resource.data.ownerId == request.auth.uid
        && request.resource.data.fromDogOwnerId != request.resource.data.toDogOwnerId;

      allow delete: if isOwner(resource.data.ownerId);
    }

    // --- matches: server-only is fine ---
    match /matches/{matchId} {
      allow read: if isSignedIn();
      allow create, update, delete: if false;
    }
  }
}
