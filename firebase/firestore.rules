rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isOwner(ownerId) { return isSignedIn() && request.auth.uid == ownerId; }

    match /users/{uid} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if isOwner(resource.data.uid);
    }

    match /dogs/{dogId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.ownerId);
      allow create, update: if
        request.resource.data.keys().hasAll(["ownerId","name","sex"]) &&
        (request.resource.data.name is string) &&
        (request.resource.data.sex in ["M","F"]);
    }

    match /likes/{likeId} {
      allow read: if isSignedIn();
      // owner of the "from" dog is the liker
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow delete: if isOwner(resource.data.ownerId);
      // block self-like (client must provide fromDogOwnerId/toDogOwnerId)
      allow create: if request.resource.data.fromDogOwnerId != request.resource.data.toDogOwnerId;
    }

    match /matches/{matchId} {
      allow read: if isSignedIn();
      allow create, update, delete: if false; // only server (Functions/admin) creates
    }
  }
}
